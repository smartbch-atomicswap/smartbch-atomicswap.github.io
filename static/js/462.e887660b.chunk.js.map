{"version":3,"file":"static/js/462.e887660b.chunk.js","mappings":"iHAEA,IAGMA,EAAyB,MACzBC,EAA+B,GAAK,GAIpCC,EAAcF,SAiCpBG,EAAOC,QAAU,CAAEC,OA/BnB,SAAiBC,GACf,OAVsC,WAUlCA,EAAkD,CAAC,EACnDA,EAAWL,EACN,CACLM,SAAUD,EAAWN,IAZW,GAgB7B,CACLQ,OAAQF,EAAWN,EAEvB,EAoB2BS,OAlB3B,SAAeC,GAAuB,IAAnBF,EAAME,EAANF,OAAQD,EAAOG,EAAPH,QACzB,QAAeI,IAAXH,QAAoCG,IAAZJ,EAAuB,MAAM,IAAIK,UAAU,oCACvE,QAAeD,IAAXH,QAAoCG,IAAZJ,EAAuB,OAzB9B,WA2BrB,QAAgBI,IAAZJ,EAAuB,CACzB,IAAKM,OAAOC,SAASP,GAAU,MAAM,IAAIK,UAAU,2BACnD,GAAIL,EAAUL,EAAa,MAAM,IAAIU,UAAU,8BAAgCV,GAC/E,GAAIK,EAvBY,MAuBc,EAAG,MAAM,IAAIK,UAAU,gDAErD,OAAOX,EAA+BM,GA9BJ,CA+BpC,CAEA,IAAKM,OAAOC,SAASN,GAAS,MAAM,IAAII,UAAU,0BAClD,GAAIJ,EAASR,EAAwB,MAAM,IAAIY,UAAU,mCAEzD,OAAOJ,CACT,E","sources":["../node_modules/bip68/index.js"],"sourcesContent":["// see https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki#compatibility\n\nconst SEQUENCE_FINAL = 0xffffffff\nconst SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31)\nconst SEQUENCE_LOCKTIME_GRANULARITY = 9\nconst SEQUENCE_LOCKTIME_MASK = 0x0000ffff\nconst SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22)\n\nconst BLOCKS_MAX = SEQUENCE_LOCKTIME_MASK\nconst SECONDS_MOD = 1 << SEQUENCE_LOCKTIME_GRANULARITY\nconst SECONDS_MAX = SEQUENCE_LOCKTIME_MASK << SEQUENCE_LOCKTIME_GRANULARITY\n\nfunction decode (sequence) {\n  if (sequence & SEQUENCE_LOCKTIME_DISABLE_FLAG) return {}\n  if (sequence & SEQUENCE_LOCKTIME_TYPE_FLAG) {\n    return {\n      seconds: (sequence & SEQUENCE_LOCKTIME_MASK) << SEQUENCE_LOCKTIME_GRANULARITY\n    }\n  }\n\n  return {\n    blocks: sequence & SEQUENCE_LOCKTIME_MASK\n  }\n}\n\nfunction encode ({ blocks, seconds }) {\n  if (blocks !== undefined && seconds !== undefined) throw new TypeError('Cannot encode blocks AND seconds')\n  if (blocks === undefined && seconds === undefined) return SEQUENCE_FINAL // neither? assume final\n\n  if (seconds !== undefined) {\n    if (!Number.isFinite(seconds)) throw new TypeError('Expected Number seconds')\n    if (seconds > SECONDS_MAX) throw new TypeError('Expected Number seconds <= ' + SECONDS_MAX)\n    if (seconds % SECONDS_MOD !== 0) throw new TypeError('Expected Number seconds as a multiple of ' + SECONDS_MOD)\n\n    return SEQUENCE_LOCKTIME_TYPE_FLAG | (seconds >> SEQUENCE_LOCKTIME_GRANULARITY)\n  }\n\n  if (!Number.isFinite(blocks)) throw new TypeError('Expected Number blocks')\n  if (blocks > SEQUENCE_LOCKTIME_MASK) throw new TypeError('Expected Number blocks <= ' + BLOCKS_MAX)\n\n  return blocks\n}\n\nmodule.exports = { decode, encode }\n"],"names":["SEQUENCE_LOCKTIME_MASK","SEQUENCE_LOCKTIME_TYPE_FLAG","SECONDS_MAX","module","exports","decode","sequence","seconds","blocks","encode","_ref","undefined","TypeError","Number","isFinite"],"sourceRoot":""}